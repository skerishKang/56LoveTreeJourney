import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { ArrowLeft, Heart, MessageCircle, Share2, Search, Filter, Star, TrendingUp, Clock, Users } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Link } from "wouter";
import BottomNavigation from "@/components/bottom-navigation";
import LoveTreeMindmap from "@/components/love-tree-mindmap";
import { Dialog, DialogContent } from "@/components/ui/dialog";

export default function PopularLoveTrees() {
  const [selectedCategory, setSelectedCategory] = useState("Ï†ÑÏ≤¥");
  const [sortBy, setSortBy] = useState("Ïù∏Í∏∞Ïàú");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedLoveTree, setSelectedLoveTree] = useState<any>(null);
  const [showMindmap, setShowMindmap] = useState(false);

  // Ïù∏Í∏∞ Îü¨Î∏åÌä∏Î¶¨ Îç∞Ïù¥ÌÑ∞ (ÏòàÏãú)
  const popularTrees = [
    {
      id: 1,
      title: "NewJeans ÏûÖÎçï Ïó¨Ï†ï",
      creator: "ÎØºÏßÄÎü¨Î≤Ñ",
      category: "K-POP",
      thumbnail: "üê∞",
      description: "ÌïòÎãàÏùò Í∑ÄÏó¨Ïö¥ Î™®ÏäµÏóê Î∞òÌï¥ÏÑú ÏãúÏûëÎêú Îâ¥ÏßÑÏä§ ÏûÖÎçïÍ∏∞",
      likeCount: 1247,
      commentCount: 89,
      viewCount: 5832,
      videoCount: 12,
      completionRate: 100,
      tags: ["Îâ¥ÏßÑÏä§", "ÎØºÏßÄ", "ÌïòÎãà", "Í∑ÄÏó¨ÏõÄ"],
      createdAt: "2025-01-20",
      isHot: true,
      difficulty: "Ïâ¨ÏõÄ"
    },
    {
      id: 2,
      title: "ÏïÑÏù¥Î∏å ÎåÑÏä§ ÎßàÏä§ÌÑ∞ Í≥ºÏ†ï",
      creator: "ÏïÑÏù¥Î∏åÎåÑÏÑú",
      category: "K-POP",
      thumbnail: "üíÉ",
      description: "Love DiveÎ∂ÄÌÑ∞ I AMÍπåÏßÄ ÏïÑÏù¥Î∏å ÎåÑÏä§ ÏôÑÏ†ÑÏ†ïÎ≥µ",
      likeCount: 892,
      commentCount: 67,
      viewCount: 3456,
      videoCount: 18,
      completionRate: 95,
      tags: ["ÏïÑÏù¥Î∏å", "ÎåÑÏä§", "ÏïàÏú†ÏßÑ", "Ïû•ÏõêÏòÅ"],
      createdAt: "2025-01-18",
      isHot: false,
      difficulty: "Î≥¥ÌÜµ"
    },
    {
      id: 3,
      title: "Ïä§Ìä∏Î†àÏù¥ ÌÇ§Ï¶à Îû© Î∂ÑÏÑù",
      creator: "Î∞©Ï∞¨Ïù¥Ìòï",
      category: "K-POP",
      thumbnail: "üé§",
      description: "Ï∞ΩÎπàÏùò Îû© Ïä§ÌÇ¨Ïóê Í∞êÌÉÑÌïòÎ©∞ ÏãúÏûëÎêú Ïä§ÌÇ§Ï¶à ÎçïÏßà",
      likeCount: 756,
      commentCount: 45,
      viewCount: 2789,
      videoCount: 15,
      completionRate: 88,
      tags: ["Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à", "Ï∞ΩÎπà", "Îû©", "3RACHA"],
      createdAt: "2025-01-15",
      isHot: true,
      difficulty: "Ïñ¥Î†§ÏõÄ"
    },
    {
      id: 4,
      title: "ÎìúÎùºÎßà OST ÏûÖÎçïÍ∏∞",
      creator: "ÎìúÎùºÎßàÌôÄÎ¶≠",
      category: "ÎìúÎùºÎßà",
      thumbnail: "üé≠",
      description: "ÎààÎ¨ºÏùò Ïó¨Ïôï OSTÏóêÏÑú ÏãúÏûëÎêú ÌïúÍµ≠ ÎìúÎùºÎßà ÏÇ¨Îûë",
      likeCount: 634,
      commentCount: 32,
      viewCount: 1892,
      videoCount: 8,
      completionRate: 75,
      tags: ["ÎìúÎùºÎßà", "OST", "ÎààÎ¨ºÏùòÏó¨Ïôï", "ÍπÄÏàòÌòÑ"],
      createdAt: "2025-01-12",
      isHot: false,
      difficulty: "Ïâ¨ÏõÄ"
    },
    {
      id: 5,
      title: "ÏùºÎ≥∏ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÉêÌóò",
      creator: "Ïò§ÌÉÄÏø†Ïôï",
      category: "Ïï†ÎãàÎ©îÏù¥ÏÖò",
      thumbnail: "üå∏",
      description: "Í∑ÄÎ©∏Ïùò ÏπºÎÇ†Î∂ÄÌÑ∞ ÏãúÏûëÎêú ÏùºÎ≥∏ Ïï†Îãà ÏÑ∏Í≥Ñ ÌÉêÌóòÍ∏∞",
      likeCount: 543,
      commentCount: 28,
      viewCount: 1567,
      videoCount: 22,
      completionRate: 92,
      tags: ["Ïï†ÎãàÎ©îÏù¥ÏÖò", "Í∑ÄÎ©∏ÏùòÏπºÎÇ†", "ÏùºÎ≥∏", "ÎßåÌôî"],
      createdAt: "2025-01-10",
      isHot: false,
      difficulty: "Î≥¥ÌÜµ"
    }
  ];

  const categories = ["Ï†ÑÏ≤¥", "K-POP", "ÎìúÎùºÎßà", "Ïï†ÎãàÎ©îÏù¥ÏÖò", "ÏòÅÌôî", "Ïú†ÌäúÎ≤Ñ"];
  const sortOptions = ["Ïù∏Í∏∞Ïàú", "ÏµúÏã†Ïàú", "Ï¢ãÏïÑÏöîÏàú", "ÎåìÍ∏ÄÏàú", "ÏôÑÏÑ±ÎèÑÏàú"];

  const filteredTrees = popularTrees.filter(tree => {
    const matchesCategory = selectedCategory === "Ï†ÑÏ≤¥" || tree.category === selectedCategory;
    const matchesSearch = tree.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         tree.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    return matchesCategory && matchesSearch;
  });

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Ïâ¨ÏõÄ": return "bg-green-100 text-green-700";
      case "Î≥¥ÌÜµ": return "bg-amber-50 text-amber-700";
      case "Ïñ¥Î†§ÏõÄ": return "bg-red-100 text-red-700";
      default: return "bg-gray-100 text-gray-700";
    }
  };

  const handleTreeClick = (tree: any) => {
    setSelectedLoveTree(tree);
    setShowMindmap(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-love-light via-white to-love-light">
      {/* Header */}
      <header className="sticky top-0 z-50 bg-white/90 backdrop-blur-sm border-b border-love-pink/20">
        <div className="max-w-md mx-auto px-4 py-3">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-3">
              <Link href="/">
                <Button variant="ghost" size="sm" className="rounded-full">
                  <ArrowLeft className="w-5 h-5" />
                </Button>
              </Link>
              <div>
                <h1 className="text-lg font-bold text-gray-800">Ï£ºÎ™©Î∞õÎäî Îü¨Î∏åÌä∏Î¶¨</h1>
                <p className="text-sm text-gray-600">Ïù∏Í∏∞ Îü¨Î∏åÌä∏Î¶¨Î•º ÎëòÎü¨Î≥¥ÏÑ∏Ïöî ‚ú®</p>
              </div>
            </div>
            <Badge className="bg-gradient-to-r from-pink-500 to-purple-500 text-white">
              {filteredTrees.length}Í∞ú
            </Badge>
          </div>

          {/* Í≤ÄÏÉâ */}
          <div className="relative mb-3">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            <Input
              placeholder="Îü¨Î∏åÌä∏Î¶¨ Í≤ÄÏÉâ..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* ÌïÑÌÑ∞ */}
          <div className="flex space-x-2">
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="flex-1">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {categories.map(category => (
                  <SelectItem key={category} value={category}>{category}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger className="flex-1">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {sortOptions.map(option => (
                  <SelectItem key={option} value={option}>{option}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-md mx-auto px-4 pb-20">
        <Tabs defaultValue="grid" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="grid">Í∑∏Î¶¨Îìú Î≥¥Í∏∞</TabsTrigger>
            <TabsTrigger value="list">Î¶¨Ïä§Ìä∏ Î≥¥Í∏∞</TabsTrigger>
          </TabsList>

          <TabsContent value="grid">
            <div className="grid grid-cols-1 gap-4">
              {filteredTrees.map((tree) => (
                <Card 
                  key={tree.id} 
                  className="hover:shadow-lg transition-all duration-300 cursor-pointer"
                  onClick={() => handleTreeClick(tree)}
                >
                  <CardContent className="p-4">
                    <div className="flex items-start space-x-3">
                      <div className="w-16 h-16 bg-gradient-to-br from-pink-400 to-purple-500 rounded-xl flex items-center justify-center text-2xl">
                        {tree.thumbnail}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <h3 className="font-bold text-gray-800 line-clamp-1">{tree.title}</h3>
                          {tree.isHot && (
                            <Badge className="bg-gradient-to-r from-amber-100 to-orange-500 text-white text-xs">
                              üî• HOT
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 mb-2 line-clamp-2">{tree.description}</p>
                        
                        <div className="flex items-center space-x-2 mb-2">
                          <Badge variant="outline" className="text-xs">{tree.category}</Badge>
                          <Badge className={`text-xs ${getDifficultyColor(tree.difficulty)}`}>
                            {tree.difficulty}
                          </Badge>
                          <span className="text-xs text-gray-500">by {tree.creator}</span>
                        </div>

                        <div className="flex items-center space-x-4 text-xs text-gray-500 mb-2">
                          <div className="flex items-center space-x-1">
                            <Heart className="w-3 h-3 text-red-400" />
                            <span>{tree.likeCount}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <MessageCircle className="w-3 h-3 text-blue-400" />
                            <span>{tree.commentCount}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <Users className="w-3 h-3 text-green-400" />
                            <span>{tree.viewCount}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <Star className="w-3 h-3 text-amber-400" />
                            <span>{tree.completionRate}%</span>
                          </div>
                        </div>

                        <div className="flex flex-wrap gap-1">
                          {tree.tags.slice(0, 3).map(tag => (
                            <Badge key={tag} variant="outline" className="text-xs bg-purple-50 text-purple-600">
                              #{tag}
                            </Badge>
                          ))}
                          {tree.tags.length > 3 && (
                            <Badge variant="outline" className="text-xs">
                              +{tree.tags.length - 3}
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="list">
            <div className="space-y-3">
              {filteredTrees.map((tree) => (
                <Card 
                  key={tree.id} 
                  className="hover:shadow-lg transition-all duration-300 cursor-pointer"
                  onClick={() => handleTreeClick(tree)}
                >
                  <CardContent className="p-3">
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-12 bg-gradient-to-br from-pink-400 to-purple-500 rounded-lg flex items-center justify-center text-lg">
                        {tree.thumbnail}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <h4 className="font-medium text-gray-800">{tree.title}</h4>
                          <div className="flex items-center space-x-2 text-xs text-gray-500">
                            <Heart className="w-3 h-3 text-red-400" />
                            <span>{tree.likeCount}</span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mb-1">by {tree.creator}</p>
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline" className="text-xs">{tree.category}</Badge>
                          <span className="text-xs text-gray-500">{tree.videoCount}Í∞ú ÏòÅÏÉÅ</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>

        {/* Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå */}
        {filteredTrees.length === 0 && (
          <div className="text-center py-12">
            <Search className="w-12 h-12 text-gray-300 mx-auto mb-3" />
            <h3 className="text-lg font-medium text-gray-600 mb-2">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏñ¥Ïöî</h3>
            <p className="text-sm text-gray-500 mb-4">
              Îã§Î•∏ ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâÌï¥Î≥¥Í±∞ÎÇò Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Î≥ÄÍ≤ΩÌï¥Î≥¥ÏÑ∏Ïöî
            </p>
            <Button 
              variant="outline" 
              onClick={() => {
                setSearchQuery("");
                setSelectedCategory("Ï†ÑÏ≤¥");
              }}
            >
              ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
            </Button>
          </div>
        )}

        {/* ÌïòÎã® ÏïàÎÇ¥ */}
        <Card className="mt-6 bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
          <CardContent className="p-4 text-center">
            <TrendingUp className="w-8 h-8 text-purple-500 mx-auto mb-2" />
            <h4 className="font-medium text-gray-800 mb-2">Îçî ÎßéÏùÄ Îü¨Î∏åÌä∏Î¶¨Î•º Ï∞æÍ≥† Í≥ÑÏã†Í∞ÄÏöî?</h4>
            <p className="text-sm text-gray-600 mb-3">
              üîç ÎèãÎ≥¥Í∏∞Î°ú Í≤ÄÏÉâÌïòÍ±∞ÎÇò ÏÉàÎ°úÏö¥ Îü¨Î∏åÌä∏Î¶¨Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî!
            </p>
            <div className="flex space-x-2">
              <Button variant="outline" size="sm" className="flex-1">
                <Search className="w-4 h-4 mr-1" />
                Í≥†Í∏â Í≤ÄÏÉâ
              </Button>
              <Button size="sm" className="flex-1 bg-gradient-to-r from-pink-500 to-purple-500 text-white">
                <Star className="w-4 h-4 mr-1" />
                ÎÇ¥ Îü¨Î∏åÌä∏Î¶¨ ÎßåÎì§Í∏∞
              </Button>
            </div>
          </CardContent>
        </Card>
      </main>

      <BottomNavigation />

      {/* Îü¨Î∏åÌä∏Î¶¨ ÏÉÅÏÑ∏ ÎßàÏù∏ÎìúÎßµ Î™®Îã¨ */}
      <Dialog open={showMindmap} onOpenChange={setShowMindmap}>
        <DialogContent className="max-w-full max-h-full w-screen h-screen p-0 border-0">
          {selectedLoveTree && (
            <LoveTreeMindmap 
              loveTree={selectedLoveTree}
              items={[]} // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ïó∞Í≤∞ Ïãú ÏïÑÏù¥ÌÖú Ï†ÑÎã¨
              isFullscreen={true}
              onClose={() => setShowMindmap(false)}
            />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}